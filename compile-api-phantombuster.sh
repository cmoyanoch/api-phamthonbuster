#!/bin/bash

# =====================================================
# SCRIPT DE COMPILACI√ìN - API PHANTOMBUSTER
# =====================================================
# Este script compila y reinicia la API de Phantombuster
# Incluye: compilaci√≥n, reinicio y verificaci√≥n
# =====================================================

set -e  # Salir si hay alg√∫n error

# Colores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Funci√≥n para imprimir mensajes
print_status() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Funci√≥n para verificar requisitos
check_requirements() {
    print_status "Verificando requisitos del sistema..."

    # Guardar el directorio actual
    SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

    # Cambiar al directorio ra√≠z del proyecto (un nivel arriba)
    cd "$SCRIPT_DIR/.."

    # Verificar que estemos en el directorio correcto
    if [ ! -f "docker-compose.yml" ]; then
        print_error "No se encontr√≥ docker-compose.yml. Aseg√∫rate de estar en la ra√≠z del proyecto."
        exit 1
    fi

    # Verificar que exista el directorio api-phamthonbuster
    if [ ! -d "api-phamthonbuster" ]; then
        print_error "No se encontr√≥ el directorio api-phamthonbuster."
        exit 1
    fi

    # Verificar Docker
    if ! command -v docker >/dev/null 2>&1; then
        print_error "Docker no est√° instalado. Por favor instala Docker."
        exit 1
    fi

    print_success "Todos los requisitos est√°n cumplidos"
}

# Funci√≥n para compilar la API
build_api() {
    print_status "Compilando API Phantombuster..."

    # Compilar sin cach√© para asegurar cambios
    if docker compose build phantombuster-api --no-cache; then
        print_success "API Phantombuster compilada exitosamente"
    else
        print_error "Error en la compilaci√≥n de la API"
        exit 1
    fi
}

# Funci√≥n para ejecutar migraci√≥n de base de datos
run_migration() {
    print_status "Verificando migraci√≥n de base de datos..."

    # Verificar si las tablas ya existen (con mejor manejo de errores)
    if docker compose exec n8n_postgres psql -U n8n_user -d n8n_db -c "\dt phantombuster.searches" 2>/dev/null | grep -q "searches"; then
        print_success "Tablas ya existen, saltando migraci√≥n"
        return 0
    elif docker compose exec n8n_postgres psql -U n8n_user -d n8n_db -c "\dt" 2>/dev/null | grep -q "phantombuster"; then
        print_success "Esquema phantombuster ya existe, saltando migraci√≥n"
        return 0
    else
        print_status "Tablas no encontradas, ejecutando migraci√≥n..."

        # Ejecutar migraci√≥n dentro del contenedor
        if docker compose exec phantombuster-api node database-service.js; then
            print_success "Migraci√≥n de base de datos completada"
        else
            print_warning "Error en migraci√≥n de base de datos (puede ser normal si ya existe)"
        fi
    fi
}

# Funci√≥n para reiniciar el servicio
restart_service() {
    print_status "Reiniciando servicio phantombuster-api..."

    if docker compose restart phantombuster-api; then
        print_success "Servicio reiniciado exitosamente"
    else
        print_error "Error al reiniciar el servicio"
        exit 1
    fi
}

# Funci√≥n para verificar el servicio
check_service() {
    print_status "Verificando estado del servicio..."

    # Esperar a que el servicio se inicie
    sleep 10

    # Verificar estado del contenedor
    echo ""
    print_status "Estado del contenedor:"
    docker compose ps phantombuster-api

    # Verificar health check
    echo ""
    print_status "Verificando health check..."
    if curl -f http://localhost:3001/health >/dev/null 2>&1; then
        print_success "‚úÖ API Phantombuster est√° respondiendo correctamente"

        # Mostrar respuesta del health check
        echo ""
        print_status "Respuesta del health check:"
        curl -s http://localhost:3001/health | jq . 2>/dev/null || curl -s http://localhost:3001/health
    else
        print_warning "‚ö†Ô∏è  API no responde a√∫n (puede estar iniciando)"
    fi
}

# Funci√≥n para mostrar logs
show_logs() {
    print_status "Mostrando logs recientes..."

    echo ""
    docker compose logs phantombuster-api --tail=20
}

# Funci√≥n para mostrar informaci√≥n final
show_final_info() {
    echo ""
    echo "====================================================="
    print_success "üéâ COMPILACI√ìN API PHANTOMBUSTER COMPLETADA"
    echo "====================================================="
    echo ""
    echo "üì± Servicio disponible:"
    echo "   ‚Ä¢ API Phantombuster: http://localhost:3001"
    echo ""
    echo "üîß Comandos √∫tiles:"
    echo "   ‚Ä¢ Ver logs: docker compose logs phantombuster-api -f"
    echo "   ‚Ä¢ Reiniciar: docker compose restart phantombuster-api"
    echo "   ‚Ä¢ Estado: docker compose ps phantombuster-api"
    echo "   ‚Ä¢ Health check: curl http://localhost:3001/health"
    echo ""
    echo "üìä Endpoints principales:"
    echo "   ‚Ä¢ Health: GET /health"
    echo "   ‚Ä¢ Search: POST /api/search/start"
    echo "   ‚Ä¢ Profile Visitor: POST /api/profile-visitor/visit-single"
    echo "   ‚Ä¢ Config: GET /api/config"
    echo ""
    echo "üîí Autenticaci√≥n:"
    echo "   ‚Ä¢ Header: X-API-Key: dev-api-key-12345"
    echo ""
    echo "====================================================="
}

# Funci√≥n para mostrar ayuda
show_help() {
    echo "Uso: $0 [OPCI√ìN]"
    echo ""
    echo "Opciones:"
    echo "  build     - Compilar y reiniciar (default)"
    echo "  migrate   - Solo ejecutar migraci√≥n de BD"
    echo "  restart   - Solo reiniciar servicio"
    echo "  check     - Solo verificar estado"
    echo "  logs      - Mostrar logs"
    echo "  help      - Mostrar esta ayuda"
    echo ""
    echo "Ejemplos:"
    echo "  $0         - Compilaci√≥n completa"
    echo "  $0 migrate - Solo migraci√≥n de BD"
    echo "  $0 restart - Solo reiniciar"
    echo "  $0 check   - Solo verificar"
}

# Funci√≥n principal
main() {
    case "${1:-build}" in
        "build")
            echo "====================================================="
            echo "üöÄ COMPILACI√ìN API PHANTOMBUSTER"
            echo "====================================================="
            echo ""

            check_requirements
            build_api
            restart_service
            run_migration
            check_service
            show_final_info

            print_success "¬°Compilaci√≥n completada exitosamente!"
            print_status "üìä Persistencia de datos habilitada"
            ;;
        "migrate")
            echo "====================================================="
            echo "üóÑÔ∏è MIGRACI√ìN BASE DE DATOS"
            echo "====================================================="
            echo ""

            check_requirements
            run_migration
            print_success "¬°Migraci√≥n completada!"
            ;;
        "restart")
            echo "====================================================="
            echo "üîÑ REINICIO API PHANTOMBUSTER"
            echo "====================================================="
            echo ""

            check_requirements
            restart_service
            check_service
            show_final_info

            print_success "¬°Reinicio completado exitosamente!"
            ;;
        "check")
            echo "====================================================="
            echo "üîç VERIFICACI√ìN API PHANTOMBUSTER"
            echo "====================================================="
            echo ""

            check_requirements
            check_service
            show_logs

            print_success "¬°Verificaci√≥n completada!"
            ;;
        "logs")
            echo "====================================================="
            echo "üìã LOGS API PHANTOMBUSTER"
            echo "====================================================="
            echo ""

            check_requirements
            show_logs

            print_success "¬°Logs mostrados!"
            ;;
        "help"|"-h"|"--help")
            show_help
            ;;
        *)
            print_error "Opci√≥n desconocida: $1"
            echo ""
            show_help
            exit 1
            ;;
    esac
}

# Ejecutar funci√≥n principal
main "$@"
