#!/bin/bash

# =====================================================
# SCRIPT DE COMPILACI√ìN - API PHANTOMBUSTER
# =====================================================
# Este script compila y reinicia la API de Phantombuster
# Incluye: instalaci√≥n de dependencias, compilaci√≥n, reinicio y verificaci√≥n
# =====================================================

set -e  # Salir si hay alg√∫n error

# Colores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Funci√≥n para imprimir mensajes
print_status() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Funci√≥n para limpiar Docker antes de compilar
cleanup_docker_before() {
    print_status "üßπ Limpiando Docker antes de compilar..."

    # Eliminar im√°genes sin etiqueta
    local dangling_images=$(docker images -f "dangling=true" -q)
    if [ ! -z "$dangling_images" ]; then
        print_status "Eliminando im√°genes sin etiqueta..."
        docker rmi $dangling_images 2>/dev/null || print_warning "Algunas im√°genes no se pudieron eliminar"
    fi

    # Limpiar contenedores detenidos
    local stopped=$(docker ps -a -q -f status=exited)
    if [ ! -z "$stopped" ]; then
        docker rm $stopped 2>/dev/null || true
    fi

    # Limpiar sistema
    docker volume prune -f >/dev/null 2>&1 || true
    docker network prune -f >/dev/null 2>&1 || true

    print_success "‚úÖ Sistema Docker limpio - listo para compilar"
}

# Funci√≥n para limpiar Docker despu√©s de compilar
cleanup_docker_after() {
    print_status "üßπ Limpieza post-compilaci√≥n..."

    # Eliminar im√°genes sin etiqueta generadas
    local dangling_images=$(docker images -f "dangling=true" -q)
    if [ ! -z "$dangling_images" ]; then
        docker rmi $dangling_images 2>/dev/null || true
    fi

    # Limpiar cach√© de build
    docker builder prune -f >/dev/null 2>&1 || true

    print_success "‚úÖ Limpieza post-compilaci√≥n completada"
}

# Funci√≥n para verificar requisitos
check_requirements() {
    print_status "Verificando requisitos del sistema..."

    # Guardar el directorio actual
    SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

    # Cambiar al directorio ra√≠z del proyecto (un nivel arriba)
    cd "$SCRIPT_DIR/.."

    # Verificar que estemos en el directorio correcto
    if [ ! -f "docker-compose.yml" ]; then
        print_error "No se encontr√≥ docker-compose.yml. Aseg√∫rate de estar en la ra√≠z del proyecto."
        exit 1
    fi

    # Verificar que exista el directorio api-phamthonbuster
    if [ ! -d "api-phamthonbuster" ]; then
        print_error "No se encontr√≥ el directorio api-phamthonbuster."
        exit 1
    fi

    # Verificar Docker
    if ! command -v docker >/dev/null 2>&1; then
        print_error "Docker no est√° instalado. Por favor instala Docker."
        exit 1
    fi

    print_success "Todos los requisitos est√°n cumplidos"
}

# Funci√≥n para instalar dependencias faltantes
install_dependencies() {
    print_status "üì¶ Verificando e instalando dependencias..."

    cd api-phamthonbuster

    # Verificar si winston est√° instalado
    if ! npm list winston >/dev/null 2>&1; then
        print_status "Instalando winston (sistema de logging)..."
        npm install winston
        print_success "‚úÖ winston instalado"
    else
        print_success "‚úÖ winston ya est√° instalado"
    fi

    # Verificar si cheerio est√° instalado
    if ! npm list cheerio >/dev/null 2>&1; then
        print_status "Instalando cheerio (versi√≥n compatible con Node.js 18)..."
        npm install cheerio@1.0.0-rc.12
        print_success "‚úÖ cheerio instalado"
    else
        print_success "‚úÖ cheerio ya est√° instalado"
    fi

    # Verificar otras dependencias cr√≠ticas
    local critical_deps=("express" "axios" "pg" "redis" "cors" "helmet")
    for dep in "${critical_deps[@]}"; do
        if ! npm list "$dep" >/dev/null 2>&1; then
            print_warning "‚ö†Ô∏è  Dependencia faltante: $dep"
            print_status "Instalando $dep..."
            npm install "$dep"
        fi
    done

    cd ..
    print_success "‚úÖ Todas las dependencias verificadas e instaladas"
}

# Funci√≥n para compilar la API
build_api() {
    print_status "üî® Compilando API Phantombuster..."

    # Compilar sin cach√© para asegurar cambios
    if docker compose build phantombuster-api --no-cache; then
        print_success "‚úÖ API Phantombuster compilada exitosamente"
    else
        print_error "‚ùå Error en la compilaci√≥n de la API"
        exit 1
    fi
}



# Funci√≥n para reiniciar el servicio
restart_service() {
    print_status "üîÑ Reiniciando servicio phantombuster-api..."

    if docker compose restart phantombuster-api; then
        print_success "‚úÖ Servicio reiniciado exitosamente"
    else
        print_error "‚ùå Error al reiniciar el servicio"
        exit 1
    fi
}

# Funci√≥n para verificar el servicio
check_service() {
    print_status "üîç Verificando estado del servicio..."

    # Esperar a que el servicio se inicie
    print_status "‚è≥ Esperando 15 segundos para que el servicio se inicie completamente..."
    sleep 15

    # Verificar estado del contenedor
    echo ""
    print_status "üìä Estado del contenedor:"
    docker compose ps phantombuster-api

    # Verificar health check
    echo ""
    print_status "üè• Verificando health check..."

    # Intentar m√∫ltiples endpoints
    local endpoints=("/health" "/api/health" "/status")
    local api_responding=false

    for endpoint in "${endpoints[@]}"; do
        if curl -f http://localhost:3001$endpoint >/dev/null 2>&1; then
            print_success "‚úÖ API Phantombuster est√° respondiendo en $endpoint"
            api_responding=true

            # Mostrar respuesta del health check
            echo ""
            print_status "üìÑ Respuesta del health check:"
            curl -s http://localhost:3001$endpoint | jq . 2>/dev/null || curl -s http://localhost:3001$endpoint
            break
        fi
    done

    if [ "$api_responding" = false ]; then
        print_warning "‚ö†Ô∏è API no responde a√∫n (puede estar iniciando)"
        print_status "üìã Verificando logs del contenedor..."
        docker compose logs phantombuster-api --tail=10
    fi
}

# Funci√≥n para mostrar logs
show_logs() {
    print_status "üìã Mostrando logs recientes..."

    echo ""
    docker compose logs phantombuster-api --tail=20
}

# Funci√≥n para verificar conectividad completa
check_connectivity() {
    print_status "üåê Verificando conectividad completa del sistema..."

    echo ""
    print_status "üìä Estado de todos los servicios:"
    docker compose ps

    echo ""
    print_status "üîó Verificando conectividad de servicios:"

    # Verificar WebApp
    if curl -s -o /dev/null -w "WebApp: %{http_code}\n" http://localhost:3000; then
        print_success "‚úÖ WebApp respondiendo"
    else
        print_warning "‚ö†Ô∏è WebApp no responde"
    fi

    # Verificar API
    if curl -s -o /dev/null -w "API: %{http_code}\n" http://localhost:3001/api/health; then
        print_success "‚úÖ API respondiendo"
    else
        print_warning "‚ö†Ô∏è API no responde"
    fi

    # Verificar Redis
    if docker compose exec redis redis-cli ping >/dev/null 2>&1; then
        print_success "‚úÖ Redis funcionando"
    else
        print_warning "‚ö†Ô∏è Redis no responde"
    fi

    # Verificar PostgreSQL
    if docker compose exec n8n_postgres pg_isready -U n8n_user >/dev/null 2>&1; then
        print_success "‚úÖ PostgreSQL funcionando"
    else
        print_warning "‚ö†Ô∏è PostgreSQL no responde"
    fi
}

# Funci√≥n para mostrar informaci√≥n final
show_final_info() {
    echo ""
    echo "====================================================="
    print_success "üéâ COMPILACI√ìN API PHANTOMBUSTER COMPLETADA"
    echo "====================================================="
    echo ""
    echo "üì± Servicios disponibles:"
    echo "   ‚Ä¢ WebApp Next.js: http://localhost:3000"
    echo "   ‚Ä¢ API Phantombuster: http://localhost:3001"
    echo "   ‚Ä¢ n8n Workflows: http://localhost:5678"
    echo "   ‚Ä¢ PgAdmin: http://localhost:8080"
    echo ""
    echo "üîß Comandos √∫tiles:"
    echo "   ‚Ä¢ Ver logs API: docker compose logs phantombuster-api -f"
    echo "   ‚Ä¢ Reiniciar API: docker compose restart phantombuster-api"
    echo "   ‚Ä¢ Estado completo: docker compose ps"
    echo "   ‚Ä¢ Health check API: curl http://localhost:3001/api/health"
    echo ""
    echo "üìä Endpoints principales:"
    echo "   ‚Ä¢ Health: GET /api/health"
    echo "   ‚Ä¢ Search: POST /api/search/start"
    echo "   ‚Ä¢ Profile Visitor: POST /api/profile-visitor/visit-single"
    echo "   ‚Ä¢ Domain Scraper: POST /api/domain-scraper/extract-address"
    echo "   ‚Ä¢ Config: GET /api/config"
    echo ""
    echo "üîí Autenticaci√≥n:"
    echo "   ‚Ä¢ Header: X-API-Key: dev-api-key-12345"
    echo ""
    echo "üì¶ Dependencias instaladas:"
    echo "   ‚Ä¢ winston (logging)"
    echo "   ‚Ä¢ cheerio (web scraping)"
    echo "   ‚Ä¢ express, axios, pg, redis, cors, helmet"
    echo ""
    echo "====================================================="
}

# Funci√≥n para mostrar ayuda
show_help() {
    echo "Uso: $0 [OPCI√ìN]"
    echo ""
    echo "Opciones:"
    echo "  build       - Compilar y reiniciar (default)"
    echo "  deps        - Solo instalar dependencias"
    echo "  restart     - Solo reiniciar servicio"
    echo "  check       - Solo verificar estado"
    echo "  connectivity- Verificar conectividad completa"
    echo "  logs        - Mostrar logs"
    echo "  help        - Mostrar esta ayuda"
    echo ""
    echo "Ejemplos:"
    echo "  $0              - Compilaci√≥n completa"
    echo "  $0 deps         - Solo instalar dependencias"
    echo "  $0 restart      - Solo reiniciar"
    echo "  $0 check        - Solo verificar"
    echo "  $0 connectivity - Verificar conectividad completa"
}

# Funci√≥n principal
main() {
    case "${1:-build}" in
        "build")
            echo "====================================================="
            echo "üöÄ COMPILACI√ìN API PHANTOMBUSTER"
            echo "====================================================="
            echo ""

            check_requirements
            install_dependencies
            cleanup_docker_before
            build_api
            cleanup_docker_after
            restart_service
            check_service
            check_connectivity
            show_final_info

                print_success "¬°Compilaci√≥n completada exitosamente!"
            ;;
        "deps")
            echo "====================================================="
            echo "üì¶ INSTALACI√ìN DE DEPENDENCIAS"
            echo "====================================================="
            echo ""

            check_requirements
            install_dependencies
            print_success "¬°Dependencias instaladas exitosamente!"
            ;;
        "restart")
            echo "====================================================="
            echo "üîÑ REINICIO API PHANTOMBUSTER"
            echo "====================================================="
            echo ""

            check_requirements
            restart_service
            check_service
            show_final_info

            print_success "¬°Reinicio completado exitosamente!"
            ;;
        "check")
            echo "====================================================="
            echo "üîç VERIFICACI√ìN API PHANTOMBUSTER"
            echo "====================================================="
            echo ""

            check_requirements
            check_service
            show_logs

            print_success "¬°Verificaci√≥n completada!"
            ;;
        "connectivity")
            echo "====================================================="
            echo "üåê VERIFICACI√ìN DE CONECTIVIDAD COMPLETA"
            echo "====================================================="
            echo ""

            check_requirements
            check_connectivity
            show_logs

            print_success "¬°Verificaci√≥n de conectividad completada!"
            ;;
        "logs")
            echo "====================================================="
            echo "üìã LOGS API PHANTOMBUSTER"
            echo "====================================================="
            echo ""

            check_requirements
            show_logs

            print_success "¬°Logs mostrados!"
            ;;
        "help"|"-h"|"--help")
            show_help
            ;;
        *)
            print_error "Opci√≥n desconocida: $1"
            echo ""
            show_help
            exit 1
            ;;
    esac
}

# Ejecutar funci√≥n principal
main "$@"
